Changes:
	- Removed enum-specifier
	- Removed enumerator
	- Removed vararg (", ..." in parameter-type-list)
	- Removed pointers to functions and pointers to arrays
	- Removed bit fields in structures
	- Removed register storage-class-specifier
	- Removed unions
	- Removed volatile, auto, extern, static
	- Left only one integer and floating point types
	- Removed cast-expression
	- Removed "sizeof (typename)"

( ) groups,
? means optional,
| is alternation,
+ means one or more,
* means zero or more,
space means sequence,
"x" means literal x,
x% means x ("," x)* -- that is, a non-null comma-separated list of x's.


Terminals:
	typedef-name integer-constant character-constant floating-constant identifier

translation-unit: (function-definition | declaration)+

function-definition: declaration-specifiers? declarator declaration* block

declaration: declaration-specifiers init-declarator% ";"

declaration-specifiers: ("typedef" | type-specifier | "const")+

type-specifier:
	("void" | "char" | "int" | "float" | struct-specifier | typedef-name)

struct-specifier:
	"struct" (identifier? "{" struct-declaration+ "}" | identifier)

init-declarator: declarator ("=" initializer)?

struct-declaration: (type-specifier | "const")+ declarator%

declarator:
	pointer? identifier
	(
		"[" constant-expression? "]" |
		"(" parameter-type-list ")" |
		"(" identifier%? ")"
	)*

pointer: ("*" "const"?)*

parameter-type-list: parameter-declaration%

parameter-declaration: declaration-specifiers (declarator | abstract-declarator)?

initializer: assignment-expression | "{" initializer% ","? "}"

type-name: (type-specifier | "const")+ abstract-declarator?

abstract-declarator:
	pointer ("[" constant-expression? "]")*

statement:
	((identifier | "case" constant-expression | "default") ":")*
	(
		expression? ";" |
		block |
		"if" "(" expression ")" statement |
		"if" "(" expression ")" statement "else" statement |
		"switch" "(" expression ")" statement |
		"while" "(" expression ")" statement |
		"do" statement "while" "(" expression ")" ";" |
		"for" "(" expression? ";" expression? ";" expression? ")" statement |
		"goto" identifier ";" |
		"continue" ";" |
		"break" ";" |
		"return" expression? ";"
	)

block: "{" declaration* statement* "}"

expression: assignment-expression%

assignment-expression:
	(
		unary-expression
		("=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=")
	)* conditional-expression

conditional-expression: logical-OR-expression ("?" expression ":" conditional-expression)?

constant-expression: conditional-expression

logical-OR-expression: logical-AND-expression ("||" logical-AND-expression)*

logical-AND-expression: inclusive-OR-expression ("&&" inclusive-OR-expression)*

inclusive-OR-expression: exclusive-OR-expression ("|" exclusive-OR-expression)*

exclusive-OR-expression: AND-expression ("^" AND-expression)*

AND-expression: equality-expression ("&" equality-expression)*

equality-expression: relational-expression (("==" | "!=") relational-expression)*

relational-expression: shift-expression (("<" | ">" | "<=" | ">=") shift-expression)*

shift-expression: additive-expression (("<<" | ">>") additive-expression)*

additive-expression: multiplicative-expression (("+" | "-") multiplicative-expression)*

multiplicative-expression: unary-expression (("*" | "/" | "%") unary-expression)*

unary-expression:
	("++" | "--" | "sizeof")*
	(
		("&" | "*" | "+" | "-" | "~" | "!")
		unary-expression | postfix-expression
	)

postfix-expression:
	(identifier | constant | string | "(" expression ")")
	(
		"[" expression "]" |
		"(" assignment-expression% ")" |
		"." identifier |
		"->" identifier |
		"++" | "--"
	)*

constant: integer-constant | character-constant | floating-constant
